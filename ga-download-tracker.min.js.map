{"version":3,"sources":["ga-download-tracker.js"],"names":["gadt","filetypes","track","event","link","this","href","length","ga","loaded","console","log","pathname","filename","search","substring","lastIndexOf","preventDefault","trackedPageview","trackedEvent","hitType","eventCategory","eventAction","eventLabel","hitCallback","document","location","page","title","setTimeout","init","links","linksLength","i","onclick","window","onload"],"mappings":";;;;;;;;;;;;;;;CAgBA,WAEI,GAAIA,GAAO,WAGP,GAAIC,GAAY,8FAEZC,EAAQ,SAAUC,GAGlB,GAAIC,GAAOC,IACX,IAAkB,OAAdD,EAAKE,MAAsC,IAArBF,EAAKE,KAAKC,OAApC,CAKA,GAAoB,mBAAT,KAA+B,OAAPC,IAAeA,GAAGC,UAAW,EAE5D,WADAC,SAAQC,IAAI,kEAAoEP,EAAKQ,SAIzF,IAAIC,GAAWT,EAAKQ,QAGpB,IAAIC,EAASC,OAAOb,MAAe,IAKnCY,EAAWA,EAASE,UAAUF,EAASG,YAAY,KAAO,EAAGH,EAASN,QAE9C,IAApBM,EAASN,QAAb,CAMAJ,EAAMc,gBAEN,IAAIC,IAAkB,EAClBC,GAAe,CAGnBX,IAAG,QAECY,QAAS,QACTC,cAAe,kBACfC,YAAaT,EACbU,WAAYnB,EAAKQ,SACjBY,YAAa,WAETd,QAAQC,IAAI,uDAAyDP,EAAKQ,UAC1EO,GAAe,EAEXD,IACAO,SAASC,SAASpB,KAAOF,EAAKE,SAM1CE,GAAG,QAECY,QAAS,WACTO,KAAMvB,EAAKQ,SACXgB,MAAOf,EACPW,YAAa,WAETd,QAAQC,IAAI,0DAA4DP,EAAKQ,UAC7EM,GAAkB,EAEdC,IACAM,SAASC,SAASpB,KAAOF,EAAKE,SAO1CuB,WAAW,WACPnB,QAAQC,IAAI,mEAAqEP,EAAKQ,UACtFa,SAASC,SAASpB,KAAOF,EAAKE,MAC/B,QAGHwB,EAAO,WAIP,IAAK,GAHDC,GAAQN,SAASM,MACjBC,EAAcD,EAAMxB,OAEf0B,EAAI,EAAGA,EAAID,EAAaC,IAC7BF,EAAME,GAAGC,QAAUhC,EAI3B,QACI4B,KAAMA,EACN5B,MAAOA,KAKfiC,QAAOnC,KAAOA,EAGdmC,OAAOC,OAASpC,EAAK8B","file":"ga-download-tracker.min.js","sourcesContent":["/*\r\n * Google Analytics Download Tracker\r\n * https://github.com/bjarte/ga-download-tracker\r\n * \r\n * Version 1.1.0\r\n * \r\n * GADT sends a virtual pageview and an event to Google Analytics \r\n * when a user clicks a link to download a file.\r\n * \r\n * Copyright (c) 2017 Bjarte Aune Olsen (https://basementmedia.no)\r\n * \r\n * Licensed under the MIT (http://en.wikipedia.org/wiki/MIT_License) license.\r\n * \r\n * Inspired by Entourage.js by Tian Davis (http://techoctave.com/c7)\r\n */\r\n\r\n(function () {\r\n\r\n    var gadt = (function () {\r\n\r\n        // Filetypes to track\r\n        var filetypes = /\\.pdf$|\\.zip$|\\.od*|\\.doc*|\\.xls*|\\.ppt*|\\.exe$|\\.dmg$|\\.mp\\d$|\\.mov$|\\.avi$|\\.wav$|\\.ogg$/i;\r\n\r\n        var track = function (event) {\r\n\r\n            // This script only works if it is called from a link <a> with a href attribute\r\n            var link = this;\r\n            if (link.href === null || link.href.length === 0) {\r\n                return;\r\n            }\r\n\r\n            // Is Google Analytics loaded?\r\n            if (typeof (ga) === \"undefined\" || ga === null || ga.loaded !== true) {\r\n                console.log(\"Google Analytics is not loaded, cannot track download of file: \" + link.pathname);\r\n                return;\r\n            }\r\n\r\n            var filename = link.pathname;\r\n\r\n            // Is this a link to a file?\r\n            if (filename.search(filetypes) === -1) {\r\n                return;\r\n            }\r\n\r\n            // Remove everything before the last slash in the path\r\n            filename = filename.substring(filename.lastIndexOf(\"/\") + 1, filename.length);\r\n\r\n            if (filename.length === 0) {\r\n                return;\r\n            }\r\n\r\n            // Prevent the browser from downloading the file before\r\n            // Google Analytics has had time to track it\r\n            event.preventDefault();\r\n\r\n            var trackedPageview = false;\r\n            var trackedEvent = false;\r\n\r\n            // Send event to Google Analytics\r\n            ga(\"send\",\r\n            {\r\n                hitType: \"event\",\r\n                eventCategory: \"Downloaded file\",\r\n                eventAction: filename,\r\n                eventLabel: link.pathname,\r\n                hitCallback: function () {\r\n                    // When Google Analytics is done tracking, download file\r\n                    console.log(\"Google Analytics tracked download of file as event: \" + link.pathname);\r\n                    trackedEvent = true;\r\n                    // Only download file if both event and pageview tracking is finished\r\n                    if (trackedPageview) {\r\n                        document.location.href = link.href;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Send virtual pageview to Google Analytics\r\n            ga(\"send\",\r\n            {\r\n                hitType: \"pageview\",\r\n                page: link.pathname,\r\n                title: filename,\r\n                hitCallback: function () {\r\n                    // When Google Analytics is done tracking, download file\r\n                    console.log(\"Google Analytics tracked download of file as pageview: \" + link.pathname);\r\n                    trackedPageview = true;\r\n                    // Only download file if both event and pageview tracking is finished\r\n                    if (trackedEvent) {\r\n                        document.location.href = link.href;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Wait 3 seconds, and if Google Analytics hasn't responded,\r\n            // download file anyway\r\n            setTimeout(function () {\r\n                console.log(\"Google Analytics didn't respond, cannot track download of file: \" + link.pathname);\r\n                document.location.href = link.href;\r\n            }, 3000);\r\n        };\r\n\r\n        var init = function () {\r\n            var links = document.links;\r\n            var linksLength = links.length;\r\n            // Add tracking code to all links on the page\r\n            for (var i = 0; i < linksLength; i++) {\r\n                links[i].onclick = track;\r\n            }\r\n        };\r\n\r\n        return {\r\n            init: init,\r\n            track: track\r\n        };\r\n    })();\r\n\r\n    // Add tracker to global scope\r\n    window.gadt = gadt;\r\n\r\n    // Initialize tracker when page is loaded\r\n    window.onload = gadt.init;\r\n})();"]}